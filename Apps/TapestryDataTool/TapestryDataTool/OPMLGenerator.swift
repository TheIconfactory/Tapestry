//
//  OPMLGenerator.swift
//  TapestryDataTool
//
//  Created by Craig Hockenberry on 2/20/25.
//

import Foundation

struct OPMLGenerator {
	
	static func generate(from jsonObject: Any) -> String {
		var output = """
<?xml version="1.0" encoding="UTF-8"?>
<!-- OPML generated by Tapestry Data Tool on \(Date.now.formatted()) -->
<opml version="1.1">
  <head>
    <title>Tapestry.opml</title>
  </head>
  <body>

"""
		
		if let root = jsonObject as? Dictionary<String, Any> {
			if let feeds = root["feeds"] as? Array<Dictionary<String, Any>> {
				for feed in feeds {
					if let connectorId = feed["connectorId"] as? String {
						if ["xml.feed", "xml.podcast", "com.youtube", "org.jsonfeed"].contains(connectorId) {
							if let xmlUrl = feed["site"] as? String, let title = feed["displayName"] as? String {
								let encodedTitle = encodeXMLEntities(title)
								let encodedXmlUrl = encodeXMLEntities(xmlUrl)
								
								var htmlUrlAttribute = ""
								if let htmlUrl = feed["baseUrl"] as? String {
									let encodedHtmlUrl = encodeXMLEntities(htmlUrl)
									htmlUrlAttribute = "htmlUrl=\"\(encodedHtmlUrl)\""
								}
								output += """
    <outline title="\(encodedTitle)" text="\(encodedTitle)" type="rss" version="RSS" xmlUrl="\(encodedXmlUrl)" \(htmlUrlAttribute)/>

"""
								print("outline: title=\"\(title)\" xmlUrl=\"\(xmlUrl)\" \(htmlUrlAttribute)")
							}
						}
					}
				}
			}
		}
		
		output += """
  </body>
</opml>

"""
		return output
	}
	
	private static func encodeXMLEntities(_ string: String) -> String {
		var result = string
		result = result.replacingOccurrences(of: "<", with: "&lt;")
		result = result.replacingOccurrences(of: ">", with: "&gt;")
		result = result.replacingOccurrences(of: "&", with: "&amp;")
		result = result.replacingOccurrences(of: "\"", with: "&quot;")
		result = result.replacingOccurrences(of: "'", with: "&apos;")
		return result
	}
	
}
